                                            Assignment solution---------------->Linked-List



Ans-1 = class Solution {
    static boolean searchKey(int n, Node head, int key) {
        if(head == null){
            return false;
        }
    Node temp = head;
    while(temp != null){
        // check 
        if(temp.data == key){
            return true;
            // break;
        }
        temp = temp.next;
    }
    return false;
    }
}
 

Ans-2 = void inserting(int position,int data){
        int count = 1;
        if(position == 1){
            insertathead(data);
            return;
        }
        else{
          //  node prev = null;
            node curr = head;
            while(count < position-1){
                curr = curr.next;
                count++;
            }
            // create the new node
            node temp = new node(data);
            temp.next = curr.next;
            curr.next.prev = temp;
            curr.next = temp;
            temp.prev = curr;
        }

    }


Ans-3 = 
class GfG
{
    //Function to remove duplicates from sorted linked list.
    Node removeDuplicates(Node head)
    {
          Node to_free;
 
        /* do nothing if the list is empty */
        if (head == null)
            return null;
 
        /* Traverse the list till last node */
        if (head.next != null) {
 
            /* Compare head node with next node */
            if (head.data == head.next.data) {
                /* The sequence of steps is important.
                to_free pointer stores the next of head
                pointer which is to be deleted.*/
                to_free = head.next;
                head.next = head.next.next;
                removeDuplicates(head);
            }
 
            /* This is tricky: only advance if no deletion
             */
            else {
                removeDuplicates(head.next);
            }
        }
        return head;
    

    }
}


Ans-4 = 

