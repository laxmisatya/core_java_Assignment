                                                                     Assignment-problem Searching and sorting


Ans-1 = static void sum(int arr[] ,int target){
        int arr1[] = new int[2];
        int start = 0;
        int end = arr.length-1;
        while(start < end) {
            if (arr[start] + arr[end] == target) {
                System.out.println("["+ start+ "  "+ end +"]");
                return;
            }
            if (arr[start] + arr[end] > target) {
                end--;
            }
            if (arr[start] + arr[end] < target) {
                start++;
            }

        }
    }
 
Ans-2 =  static int findleft(int arr[],int target){
        int start = 0;
        int end = arr.length-1;
        int element = 0;
        while(start<=end){
            int mid = start+(end-start)/2;
            if(arr[mid] == target){
                element = mid;
                end = mid-1;
            }
            if(arr[mid] > target){
                end = mid-1;
            }
            if(arr[mid]< target){
                start = mid+1;
            }
        }
        return element;
    }
    static int findright(int arr[],int target){
        int start = 0;
        int end = arr.length-1;
        int element = 0;
        while(start<=end){
            int mid = start+(end-start)/2;
            if(arr[mid] == target){
                element = mid;
                start = mid+1;
            }
            if(arr[mid] > target){
                end = mid;
            }
            if(arr[mid]< target){
                start = mid+1;
            }
        }
        return element;
    }


Ans-3 =  static int peak(int arr[]){
        int start = 0;
        int end = arr.length-1;
        while(start < end){
            int mid =  start+(end-start)/2;
            if(arr[mid] > arr[mid+1] && arr[mid] > arr[mid-1]){
                return arr[mid];
            }
            if(arr[mid] > arr[mid+1]){
                end = mid;
            }
            if(arr[mid] > arr[mid-1]){
                start = mid+1;
            }
        }
        return -1;
    }


Ans-4 =  static int find(int arr[],int target){
        int start = 0;
        int end = arr.length-1;
        while(start<end){
            int mid = start+(end-start)/2;
            if(arr[mid] == target){
                return mid;
            }
            if(arr[mid]>target){
                end = mid-1;
            }
            if(arr[mid] < target){
                start = mid+1;
            }
        }
        return start;
    }


Ans-5 = {
        int majelement = arr[0];
        int maxcount = 1;
        for(int i = 1;i<arr.length;i++){
            if(arr[i] == majelement){
                maxcount++;
            }
            else{
                maxcount--;
            }
            if(maxcount == 0){
                majelement = arr[i];
                maxcount = 1;
            }
        }
        return majelement;
    }


Ans-6 = 





















Ans-7 =  static  int in(int arr[]){
        int count = 0;
        for(int i = 0;i<arr.length;i++){
            for(int j = i+1;j<arr.length;j++){
                if(arr[i] > arr[j]){
                    count++;
                }
            }
        }
        return count;
    }

Ans-8 = static void comman(int arr1[],int arr2[],int arr3[]){
        int start1 = 0;
        int start2 = 0;
        int start3 = 0;
        int end1 = arr1.length-1;
        int end2 = arr2.length-1;
        int end3 = arr3.length-1;
        while(start1 != end1 && start2 != end2 && start3 != end3){
            if(arr1[start1] ==  arr2[start2]  && arr2[start2] == arr3[start3]){
                System.out.println(arr1[start1]+ "  ");
                start2++;
                start3++;
                start1++;
            }
            if(arr1[start1] > arr3[start3]){
                start3++;
            }
            if(arr2[start2] < arr3[start3]){
                start2++;
            }
            if(arr3[start3] > arr1[start1]){
                start1++;
            }
        }
    }

